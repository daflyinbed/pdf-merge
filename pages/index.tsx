import {
  AppBar,
  Button,
  Container,
  Divider,
  IconButton,
  List,
  ListItem,
  ListItemSecondaryAction,
  ListItemText,
  NoSsr,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableRow,
  Toolbar,
  Typography,
} from "@material-ui/core";
import Head from "next/head";
import { makeStyles } from "@material-ui/core/styles";
import React from "react";
import { useDropzone } from "react-dropzone";
import HighlightOffIcon from "@material-ui/icons/HighlightOff";
import CloudUploadIcon from "@material-ui/icons/CloudUpload";
import { isMobile } from "../src/isMobile";
import { useEffect } from "react";
import {
  mergeAndOpen,
  mergeAndSave,
  Status,
  statusToString,
} from "../src/pdfHelper";
import { useReducer } from "react";
import { useState } from "react";
import { useCallback } from "react";
import { useRef } from "react";
const useStyles = makeStyles((theme) => ({
  upload_root: {
    margin: theme.spacing(3),
    display: "flex",
    height: 200,
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
  },
  btn: {
    display: "flex",
    justifyContent: "space-around",
    marginBottom: theme.spacing(2),
    marginTop: theme.spacing(2),
  },
  log: {
    height: "40%",
    overflow: "hidden",
  },
}));
type f = File & { path: string };
interface fileActionAdd {
  action: "add";
  files: f[];
}
interface fileActionRemove {
  action: "remove";
  filePath: string;
}
interface fileActionClean {
  action: "clean";
}
type fileAction = fileActionAdd | fileActionRemove | fileActionClean;

export default function Home() {
  const classes = useStyles();
  const { acceptedFiles, getInputProps, getRootProps } = useDropzone({
    accept: "application/pdf",
  });
  useEffect(() => {
    console.log(acceptedFiles);
    updateFiles({
      action: "add",
      files: acceptedFiles as f[],
    });
  }, [acceptedFiles]);
  const [files, updateFiles] = useReducer((state: f[], action: fileAction) => {
    switch (action.action) {
      case "add":
        return [...state, ...action.files];
      case "remove":
        return state.filter((v) => v.path !== action.filePath);
      case "clean":
        return [];
    }
  }, []);
  const [isClient, setClient] = useState(false);
  useEffect(() => {
    if (window) {
      setClient(true);
    }
  }, []);
  const onFileDeleteFuncFactory = (key: string) => () => {
    updateFiles({ action: "remove", filePath: key });
  };
  const [running, setRunning] = useState(false);
  const log = useRef<string[]>([]);
  const cb = useCallback(
    (status: Status, i: number) => {
      console.log(files[i].name, statusToString(status), "完成");
      log.current.push(files[i].name + statusToString(status) + "完成");
    },
    [files, log]
  );
  const fcb = useCallback(
    (status: Status, i: number, err: any) => {
      console.log(files[i].name, statusToString(status), err);
      log.current.push(files[i].name + statusToString(status) + err);
    },
    [files, log]
  );
  // const cb = (status: Status, i: number) => {
  //   console.log(files[i].name, statusToString(status), "完成");
  // };
  // const fcb = (status: Status, i: number, err: any) => {
  //   console.log(files[i].name, statusToString(status), err);
  // };
  return (
    <div>
      <Head>
        <title>合并PDF</title>
        {/* <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <AppBar position="sticky">
        <Toolbar>
          <Typography>合并PDF</Typography>
        </Toolbar>
      </AppBar>
      <Container maxWidth="sm">
        <Paper
          variant="outlined"
          square
          className={classes.upload_root}
          {...getRootProps()}
        >
          {isClient ? (
            isMobile() ? (
              <input {...getInputProps()} multiple />
            ) : (
              <input
                {...getInputProps()}
                multiple
                // @ts-ignore
                webkitdirectory="true"
              />
            )
          ) : (
            <input {...getInputProps()} multiple />
          )}

          <Typography>拖拽文件/文件夹或点击</Typography>
          <CloudUploadIcon fontSize="large" />
        </Paper>
        <List dense component={Paper}>
          <ListItem>
            <ListItemText>{files.length}个文件</ListItemText>
            <ListItemSecondaryAction>
              <IconButton
                onClick={() => {
                  updateFiles({ action: "clean" });
                }}
              >
                <HighlightOffIcon />
              </IconButton>
            </ListItemSecondaryAction>
          </ListItem>
          <Divider />
          {files.map((v) => (
            <ListItem dense key={v.path}>
              <ListItemText>{v.name}</ListItemText>
              <ListItemSecondaryAction>
                <IconButton onClick={onFileDeleteFuncFactory(v.path)}>
                  <HighlightOffIcon />
                </IconButton>
              </ListItemSecondaryAction>
            </ListItem>
          ))}
        </List>
        <div className={classes.btn}>
          <Button
            color="primary"
            variant="contained"
            disabled={files.length == 0 || running}
            onClick={() => {
              setRunning(true);
              log.current = [];
              mergeAndSave(files, cb, fcb).finally(() => {
                setRunning(false);
              });
            }}
          >
            合并并下载
          </Button>
          <Button
            color="primary"
            variant="contained"
            disabled={files.length == 0 || running}
            onClick={() => {
              setRunning(true);
              log.current = [];
              mergeAndOpen(files, cb, fcb).finally(() => {
                setRunning(false);
              });
            }}
          >
            合并并在新标签页打开
          </Button>
        </div>
        {log.current.length !== 0 ? (
          <List dense component={Paper} className={classes.log}>
            <ListItem>
              <ListItemText>日志</ListItemText>
            </ListItem>
            <Divider />
            {log.current.map((l, i) => (
              <ListItem dense key={i}>
                <ListItemText>{l}</ListItemText>
              </ListItem>
            ))}
          </List>
        ) : null}
      </Container>
    </div>
  );
}
